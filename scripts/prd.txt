# PRD: 심플 캘린더 프로토타입 (상세 버전)

## 1. 제품 개요
- **서비스명:** 심플 캘린더
- **목표:** 달력 기반의 직관적 일정 등록/조회/수정/삭제 기능 제공
- **핵심 가치:** 빠른 일정 관리, 심플한 UI, 개발 및 배포의 용이성

---

## 2. 기능 목록

### 2.1. 달력 및 일정
- 월간 달력 기본 화면 (현재 월, 월 이동)
- 날짜 클릭 시 일정 등록 모달
- 일정 등록: 제목(필수), 날짜/시간(필수), 설명(선택)
- 등록된 일정 달력에 표시 (제목)
- 일정 클릭 시 상세 모달 (제목, 날짜/시간, 설명)
- 일정 수정/삭제 (상세 모달 내)
- 일정 데이터는 DB에 저장

### 2.2. 사용자 및 인증
- (MVP에서는 생략, 추후 확장 가능)

### 2.3. 기타
- 반응형 UI (PC/모바일)
- 에러/로딩 처리

---

## 3. 디자인 스타일

- **스타일:** 미니멀, 직관적, 여백 활용, 부드러운 색상
- **폰트:** Pretendard, Noto Sans, 또는 시스템 폰트
- **컬러:** 흰색 배경, 포인트 컬러(블루/민트/라벤더 계열), 일정별 색상 태그(선택)
- **컴포넌트:** Tailwind CSS 기반, 모달/버튼/입력폼 일관성 유지
- **아이콘:** Heroicons, SimpleIcons 등 무료 벡터 아이콘

---

## 4. 기술 스택

- **프론트엔드:** React.js (CRA 또는 Vite), TypeScript, Tailwind CSS, dayjs 또는 date-fns
- **백엔드:** Node.js, Express.js, TypeScript
- **DB:** MongoDB (Mongoose)
- **API 통신:** RESTful (JSON)
- **상태관리:** React Query 또는 Context API (간단하게)
- **테스트:** Jest, React Testing Library (선택)
- **배포:** Docker Compose (로컬 개발/테스트)
- **CI/CD:** GitHub Actions (기본 빌드/테스트 워크플로)

---

## 5. 도커 기반 로컬 개발 환경

- **프론트엔드:** Dockerfile (Node 20, dev server)
- **백엔드:** Dockerfile (Node 20, dev server)
- **DB:** MongoDB 공식 이미지
- **docker-compose.yml:** FE/BE/DB 컨테이너 오케스트레이션, 네트워크 연결
- **.env 파일:** 환경변수 분리 (DB URI, 포트 등)

---

## 6. 깃헙 연동 및 협업

- **레포 구조:** mono-repo (frontend, backend, scripts, docs 등)
- **브랜치 전략:** main, develop, feature/*
- **PR 템플릿:** 기능/버그/문서 구분
- **이슈 관리:** GitHub Issues, Projects
- **커밋 컨벤션:** Conventional Commits

---

## 7. 일정 및 마일스톤

- 1일차: 프로젝트 구조/도커 환경/깃헙 세팅
- 2~3일차: 프론트엔드 달력 UI, 일정 등록/조회
- 4일차: 백엔드 API, DB 연동
- 5일차: FE-BE 연동, 일정 수정/삭제
- 6일차: 반응형/디자인 다듬기, 에러 처리
- 7일차: 테스트, 문서화, 배포 스크립트

---

## 8. 데이터 모델 (예시)

```ts
// backend/src/models/Event.ts
{
  _id: ObjectId,
  title: string,
  startDateTime: Date,
  endDateTime?: Date,
  description?: string,
  createdAt: Date,
  updatedAt: Date
}
```

---

## 9. API 명세 (예시)

- `GET /api/events?month=2024-07` : 월별 일정 조회
- `POST /api/events` : 일정 등록
- `GET /api/events/:id` : 일정 상세
- `PUT /api/events/:id` : 일정 수정
- `DELETE /api/events/:id` : 일정 삭제

---

## 10. 기타

- README에 개발/실행/배포 방법 상세히 기술
- .env.example 제공
- 코드/문서/이슈 모두 한글 우선, 영어 병기 가능